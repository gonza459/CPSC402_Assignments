PDefs. Program ::= [Def] ;
terminator Def "" ;

comment "//"      ;
comment "/*" "*/" ;
comment "#"       ;

DFun.      Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunc.     Def ::= Type Id "(" [Arg] ")" ";" ;
separator Arg "," ;
terminator Stm "" ;

DUsing.    Def ::= "using" QConst ";"    ;

DTypDef.   Def ::= "typedef" Type Id ";" ;
DTypDefVect. Def ::= "typedef" Type "<" [Type] ">" Id ;

DDeclVar. Def ::= Type [Id] ";"    ;

ADecl. Arg ::= Type Id ;
AType. Arg ::= Type ;
AConst. Arg ::= "const" Type Id ;
AConstType. Arg ::= "const" Type ;

SDecl.  Stm ::= Declaration ";" ;
SInit.  Stm ::= Declaration "=" Exp ";" ;

DeclaSim. Declaration ::= Type [Id] ;
DeclaConst. Declaration ::= "const" Type Id ;


SExp. Stm ::= Exp ";" ;
separator Exp "," ;

SReturn. Stm ::= "return" Exp ";"                ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm         ;

SDoWhi.  Stm ::= "do" Stm "while" "(" Exp ")" ";";
SFor.    Stm ::= "for" "(" Stm Exp ";" Exp ")" Stm ;

SBlock.  Stm ::= "{" [Stm] "}"                   ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm Contd      ;

YesContd. Contd ::= "else" Stm ;
NoContd.  Contd ::= ;

STypDef. Stm ::= "typedef" Type Id ";" ;

EExcept.     Exp2  ::= "throw" Exp             ;
ECondit.     Exp1  ::= Exp  "?"  Exp2 ":" Exp2 ;
EPlusEq.     Exp2  ::= Exp3  "+=" Exp2         ;
EMinEq.      Exp2  ::= Exp3  "-=" Exp2         ;
EAss.        Exp2  ::= Exp3  "="  Exp2         ;
EOr.         Exp3  ::= Exp3  "||" Exp4         ;
EAnd.        Exp4  ::= Exp4  "&&" Exp5         ;
ENotEq.      Exp8  ::= Exp8  "!=" Exp9         ;
EEq.         Exp8  ::= Exp8  "==" Exp9         ;
EGEq.        Exp9  ::= Exp9  ">=" Exp10        ;
ELEq.        Exp9  ::= Exp9  "<=" Exp10        ;
EGt.         Exp9  ::= Exp9  ">"  Exp10        ;
ELt.         Exp9  ::= Exp9  "<"  Exp10        ;
ERShift.     Exp10 ::= Exp10 ">>" Exp11        ;
ELShift.     Exp10 ::= Exp10 "<<" Exp11        ;
ESub.        Exp11 ::= Exp11 "-"  Exp12        ;
EAdd.        Exp11 ::= Exp11 "+"  Exp12        ;
EMod.        Exp12 ::= Exp13 "%"  Exp12        ;
EDiv.        Exp12 ::= Exp12 "/"  Exp13        ;
EMul.        Exp12 ::= Exp12 "*"  Exp13        ;
EPointer.    Exp13 ::= "*"  Exp13              ;
ENegBool.    Exp13 ::= "!"  Exp13              ;
ENegInt.     Exp13 ::= "-"  Exp13              ;
EDecr.       Exp13 ::= "--" Exp13              ;
EIncr.       Exp13 ::= "++" Exp13              ;
EAssPointer. Exp14 ::= Exp14 "->" Exp15        ;
ERefCall.    Exp14 ::= Exp14 "."  Exp15        ;
EArray.      Exp14 ::= Exp14 "["  Exp  "]"     ;
ECall.       Exp14 ::= Exp14 "(" [Exp] ")"     ;
EPostDecr.   Exp14 ::= Exp14 "--"              ;
EPostIncr.   Exp14 ::= Exp14 "++"              ;
EQConst.     Exp15 ::= QConst                  ;
EFalse.      Exp15 ::= "false"                 ;
ETrue.       Exp15 ::= "true"                  ;
EString.     Exp15 ::= [String]                ;
EChar.       Exp15 ::= Char                    ;
EDouble.     Exp15 ::= Double                  ;
EInt.        Exp15 ::= Integer                 ;
EPred.       Exp15 ::= Type Type               ;


coercions Exp 15 ;

separator nonempty Id     ","  ;
separator nonempty Type   ","  ;
separator nonempty String ""   ;
separator nonempty Elmt   "::" ;

QuConst. QConst ::= [Elmt] ;

QCElmt. Elmt ::= Id        ;
QCElntt. Elmt ::= Id "<" [Type] ">" ;


TypInt.  Type ::= "int"   ;
TypChar. Type ::= "char"  ;
TypBool. Type ::= "bool"  ;
TypVoid. Type ::= "void"  ;
TypDoub. Type ::= "double";
TypQC.   Type ::= QConst  ;
TypRef. Type ::= Type "&";

token Id (letter (letter | digit | '_')*) ;
